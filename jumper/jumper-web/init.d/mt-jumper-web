#!/usr/bin/env bash
# chkconfig: - 30 74
# description:  This is a daemon which handles app

if [ -f /etc/init.d/functions ]; then
    . /etc/init.d/functions
elif [ -f /etc/rc.d/init.d/functions ] ; then
    . /etc/rc.d/init.d/functions
else
    exit 0
fi

# Source networking configuration.
. /etc/sysconfig/network
# Check that networking is up.

[ ${NETWORKING} = "no" ] && exit 0

# service name
service_name="jumper-web"

# pid文件位置,没有可不写
# pid_dir="/var/run/app.pid"

# 工作目录
work_dir="/opt/meituan/apps/jumper-web"

# 执行的命令
exec="venv/bin/python venv/bin/gunicorn -c gun.py app.main:app"

[ -f $config ] || exit 1
RETVAL=0

# 终端颜色
Red='\033[0;31m'
Color_Off='\033[0m'
Green='\033[0;32m'


status() {
    num=`ps aux|grep "${exec}"|grep -v "grep"|wc -l`
    if [ $num -ne 0 ];then
        # startup time
        last_pid=`ps aux|grep "${exec}"|grep -v "grep"|awk '{print $2}'|tail -n 1`
        pro_list=`ps aux|grep "${exec}"|grep -v "grep"|awk '{print $2}'|sed ':a;N;$!ba;s#\n#,#g'`
        start_time=`ps -p ${last_pid} -o lstart|grep -v 'STARTED'`
        t_count=`ps xH|grep ${last_pid}|grep -v grep|wc -l`
        p_count=`ps aux|grep "${exec}"|grep -v "grep"|awk '{print $2}'|wc -l`
        printf "${Green}         status: running${Color_Off}\n"
        printf "${Green}  process count: ${p_count}${Color_Off}\n"
        printf "${Green}threads/process: ${t_count}${Color_Off}\n"
        printf "${Green}   process list: ${pro_list}${Color_Off}\n"
        printf "${Green}         uptime: ${start_time}${Color_Off}\n"

    else
        printf "${Green}         status: stopped${Color_Off}\n"
    fi
    RETVAL=$?
    return $RETVAL
}


start() {
    num=`ps aux|grep "${exec}"|grep -v "grep"|wc -l`
    if [ $num -ne 0 ];then
        printf "${Red}${service_name} is running, Skipped try to start again.${Color_Off}\n"
        return 0
    fi
    cd $work_dir && $exec
    if [ $? -ne 0 ]; then
        printf "${Red}start ${service_name} occurred errors.${Color_Off}\n"
        return 1
    fi
    printf "${Green}start ${service_name} successfully.${Color_Off}\n"
    sleep 2
    status
    RETVAL=$?
    return $RETVAL
}


stop() {
    num=`ps aux|grep "${exec}"|grep -v "grep"|wc -l`
    if [ $num -ne 0 ];then
       searching_pid=`ps aux|grep "${exec}"|grep -v "grep"|awk '{print $2}'`
       for p in $searching_pid
       do
          kill -9 $p
       done
    else
        printf "${Red}${service_name} is not running.${Color_Off}\n"
        return 0
    fi

    printf "${Green}shutdown ${service_name} successfully.${Color_Off}\n"
    RETVAL=$?
    return $RETVAL
}


restart() {
    num=`ps aux|grep "${exec}"|grep -v "grep"|wc -l`
    if [ $num -eq 0 ];then
        printf "${Red}${service_name} is not running, Trying to start.${Color_Off}\n"
        start
    else
        stop
        start
    fi
}


case "$1" in
    start)
    start
    ;;
    stop)
    stop
    ;;
    restart)
    restart
    ;;
    status)
    status
    ;;
    *)
    printf "${Red}Usage: service ${service_name} {start|stop|restart|status}.${Color_Off}\n"
        RETVAL=1
    esac
    exit $RETVAL
