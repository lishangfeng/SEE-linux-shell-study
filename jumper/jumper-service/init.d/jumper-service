#!/bin/bash
# chkconfig: - 30 74
# description:  This is a daemon which handles app

if [ -f /etc/init.d/functions ]; then
    . /etc/init.d/functions
elif [ -f /etc/rc.d/init.d/functions ] ; then
    . /etc/rc.d/init.d/functions
else
    exit 0
fi
# Source networking configuration.
. /etc/sysconfig/network
# Check that networking is up.
[ ${NETWORKING} = "no" ] && exit 0

# run user
run_user=`/usr/bin/whoami`

# service name
service_name="jumper-service"

# pid文件位置,没有可不写
pid_file="/var/sankuai/jumper-service.pid"

# 工作目录
work_dir="/data/webapps/${service_name}/current/"

# 执行的命令
exec=".venv/bin/python manage.py daemon"

[ -f $config ] || exit 1
RETVAL=0

# 终端颜色
Red='\033[0;31m'
Color_Off='\033[0m'
Green='\033[0;32m'


start() {
    if [ "$run_user" == "root" ];then
        chown sankuai:sankuai /data/applogs/jumper-service/logs -R
        cd $work_dir && sudo -H -u sankuai bash -c "test -f /opt/rh/python27/enable && source /opt/rh/python27/enable; $exec"
    elif [ "$run_user" == "sankuai" ];then
        test -f /opt/rh/python27/enable && source /opt/rh/python27/enable;
        cd $work_dir && $exec
    fi

    if [ $? -ne 0 ]; then
        printf "${Red}start ${service_name} occurred errors.${Color_Off}\n"
        return 1
    fi
    RETVAL=$?
    printf "${Green}start ${service_name} successfully.${Color_Off}\n"
    return $RETVAL
}


stop() {
    if [ -f "$pid_file" ];then
        killproc -p ${pid_file}
        RETVAL=$?
        printf "${Green}shutdown ${service_name} successfully.${Color_Off}\n"
    else
        RETVAL=1
        printf "${Red}shutdown ${service_name} failed, can't find pid file.${Color_Off}\n"
    fi
    return $RETVAL
}


restart() {
    stop
    start
}

status() {
    num=`ps aux|grep "${exec}"|grep -v "grep"|wc -l`
    if [ $num -ne 0 ];then
        initial_pid=`cat ${pid_file}`
        process_list=`ps aux|grep "${exec}"|grep -v "grep"|grep -v $initial_pid|awk '{print $2}'|sed ':a;N;$!ba;s#\n#,#g'`
        running=`ps aux|grep ${initial_pid}|grep -v "grep"|awk '{print $1}'`
        start_time=`ps -p ${initial_pid} -o lstart|grep -v 'STARTED'`
        p_count=`ps aux|grep "${exec}"|grep -v "grep"|grep -v $initial_pid|awk '{print $2}'|wc -l`
        printf "${Green}         status: running${Color_Off}\n"
        printf "${Green}   main process: ${initial_pid}${Color_Off}\n"
        printf "${Green}   basic thread: 5${Color_Off}\n"
        printf "${Green}  process count: ${p_count}${Color_Off}\n"
        printf "${Green}   process list: ${process_list}${Color_Off}\n"
        printf "${Green}   running user: ${running}${Color_Off}\n"
        printf "${Green}         uptime: ${start_time}${Color_Off}\n"

    else
        printf "${Green}status: stopped${Color_Off}\n"
    fi
    RETVAL=$?
    return $RETVAL
}

config() {
    cd $work_dir && make config
}

case "$1" in
    u|start)
    start
    ;;
    d|stop)
    stop
    ;;
    r|restart)
    restart
    ;;
    s|status)
    status
    ;;
    c|config)
    config
    ;;
    *)
    printf "${Red}Usage: service ${service_name} {start|stop|restart|status|config}.${Color_Off}\n"
        exit 1
esac
    exit $?
